# vim: foldmethod=marker foldlevel=0
[tool.poetry]
name = 'cgrparser'
version = '0.1.0'
description = "A C99 parser with additional syntax, forked from Eli Bendersky's pycparser"
authors = [
    'Eli Bendersky <eliben@gmail.com>',
    'Bruno Fauth <bvfauth@hotmail.com>'
]
license = 'BSD-3-Clause'
readme = "README.rst"
maintainers = [
    'Eli Bendersky <eliben@gmail.com>',
    'Bruno Fauth <bvfauth@hotmail.com>'
]
classifiers  =  [
    'License :: OSI Approved :: BSD License',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
]

[tool.poetry.urls]
"Homepage" = 'https://github.com/brunofauth/cgrparser'

[tool.poetry.dependencies]
python = "^3.12"

[tool.poetry.group.dev.dependencies]
ptpython = "^3.0.29"
mypy = "^1.11.2"
poethepoet = "^0.29.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Poe {{{
[tool.poe.poetry_hooks]
pre_build = "build-tables"
pre_install = "build-tables"

[tool.poe.tasks.build-tables]
cmd  = "python3 ./codegen/build_tables.py"
help = "Build 'lextab.py', 'yacctab.py' and 'c_ast.py'"

[tool.poe.tasks.clean]
shell = """
    rm -rf ./dist
    python3 -B ./codegen/clean_cached_files.py
"""
help = "Remove all '__pycache__' dirs and generated tables"

[tool.poe.tasks.test]
shell = '''
    printf \\033c
    python -m unittest discover --catch
'''
help = "Run unit tests"

[tool.poe.tasks.lint]
shell = '''
    printf \\033c
    mypy src/
'''
help = "Run mypy on codebase"
# }}}

# mypy {{{
[tool.mypy]
warn_unused_ignores = true
warn_unreachable = true
exclude = [
    'yacctab\.py$',
    'lextab\.py$',
    '^src/cgrparser/ply',
]
enable_incomplete_feature = [
    "NewGenericSyntax",
]
# }}}

# yapf {{{
[tool.yapf]
based_on_style = 'google'
coalesce_brackets = true
column_limit = 110
# continuation_align_style = "fixed"
continuation_align_style = "valign-right"
# continuation_align_style = "space"
dedent_closing_brackets = false
indent_closing_brackets = false
join_multiple_lines = false
spaces_before_comment = 3
split_arguments_when_comma_terminated = true
split_penalty_after_unary_operator = 9999999
blank_line_before_nested_class_or_def = false
# }}}

# ruff {{{
[tool.ruff]
indent-width = 4
line-length = 110
respect-gitignore = true

[tool.ruff.format]
indent-style = "space"
line-ending = 'lf'
quote-style = "preserve"
skip-magic-trailing-comma = false
# }}}
